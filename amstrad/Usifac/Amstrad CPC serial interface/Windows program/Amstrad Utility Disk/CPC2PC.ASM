.CAS_IN_OPEN EQU &BC77
.CAS_IN_CHAR EQU &BC80
.CAS_IN_CLOSE EQU &BC7A
.CAS_TEST_EOF EQU &BC89

ORG &8000
;NOLIST
write"CPC2PC.BIN"

LD HL,&9000
LD D,0
.LOOP_COND
LD A,12
CP D
JP Z,LOOP_EXIT
LD A,(HL)
LD BC,&FBD0
OUT (C),A
INC HL
INC D
JP LOOP_COND
.LOOP_EXIT

LD B,12
LD HL,&9000
LD DE,TWO_K_BUFFER
CALL CAS_IN_OPEN

LD E,A
DEC HL
DEC HL
PUSH HL
POP IY
PUSH BC

;; get start of AMSDOS work RAM
LD HL,(&be7d)
;; add on offset of loaded header 
LD BC,&e4
ADD HL,BC    
;; HL = start of record buffer
;;SEND HEADER
LD D,0
.HEAD_LOOP
LD A,128
CP D
JP Z,HEAD_EXIT
LD A,(HL)
LD BC,&FBD0
OUT (C),A
INC HL
INC D
JP HEAD_LOOP

.HEAD_EXIT

			;; send file length=HL
POP HL
				;;SEND DATA SIZE
LD BC,&FBD0
LD A,L
OUT (C),A
LD BC,&FBD0
LD A,H
OUT (C),A
				;;CHECK IF LENGTH=0
LD A,H
OR L
JR Z,NEXT_BYTE

.READ_2K

CALL CAS_IN_CHAR

LD BC,&FBD0
OUT (C),A
DEC HL

PUSH HL
PUSH IY
POP HL
LD E,(HL)
INC HL
LD D,(HL)
LD BC,2047

POP HL

.READ_BYTE

LD A,(DE)
PUSH BC
LD BC,&FBD0
OUT (C),A
POP BC
DEC BC
INC DE
DEC HL
LD A,H
OR L
JR Z,CLOSE_FILE

LD A,B
OR C
JR Z,NEXT_2K

JR READ_BYTE

.CLOSE_FILE
CALL CAS_IN_CLOSE
RET

.NEXT_2K
PUSH HL
PUSH IY
POP HL
LD (HL),E
INC HL
LD (HL),D
XOR A
LD (IY+21),A
LD (IY+22),A
POP HL
JR READ_2K




.NEXT_BYTE
CALL 	CAS_IN_CHAR
jr	nc,REAL_EOF
LD BC,&FBD0
OUT (C),A
JR NEXT_BYTE

.REAL_EOF
CALL CAS_IN_CLOSE

RET 

.TWO_K_BUFFER DEFS 1

